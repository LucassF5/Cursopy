# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID

#                                   Princ√≠pio da substitui√ß√£o de liskov
#                           Objetos de uma superclasse devem ser substitu√≠veis
#                           por objetos de uma subclasse sem quebrar a aplica√ß√£o.

# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
#Python n√£o suporta sobrecarga de m√©todos, pois a cada m√©todo criado, o anterior √© sobrescrito.
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ

from abc import ABC, abstractmethod


class Notificacao(ABC):
    #Classe abstrata
    def __init__(self, mensagem):
        self.mensagem = mensagem

    @abstractmethod
    #M√©todo abstrato
    def enviar(self) -> bool: ...


class NotificacaoEmail(Notificacao):
    #Classe concreta - implementando o m√©todo abstrato e herdando da classe abstrata
    def enviar(self) -> bool:
        #-> bool √© uma type hint/annotation
        print('E-mail: enviando - ', self.mensagem)
        return True


class NotificacaoSMS(Notificacao):
    #Classe concreta - implementando o m√©todo abstrato e herdando da classe abstrata
    def enviar(self) -> bool:
        #-> bool √© uma type hint/annotation
        print('SMS: enviando - ', self.mensagem)
        return False


def notificar(notificacao: Notificacao):
    notificacao_enviada = notificacao.enviar()

    if notificacao_enviada:
        print('Notifica√ß√£o enviada')
    else:
        print('Notifica√ß√£o N√ÉO enviada')


notificacao_email = NotificacaoEmail('testando e-mail')
notificar(notificacao_email)

notificacao_sms = NotificacaoSMS('testando SMS')
notificar(notificacao_sms)
